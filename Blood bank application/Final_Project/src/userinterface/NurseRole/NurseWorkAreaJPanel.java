/*2 1
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NurseRole;

import business.EcoSystem;
import business.Enterprise.Enterprise;
import business.Organization.LabOrganization;
import business.Organization.NutritionistOrganization;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.DonorWorkRequest;
import business.WorkQueue.NutritionistWorkRequest;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author piyush sharma
 */
public class NurseWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NurseWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    Organization organization;
    Enterprise enterprise;
    EcoSystem business;
    NutritionistWorkRequest request1;

    public NurseWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.business = business;
        populateRequestTable();
    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];

            row[0] = request.getSender();
            row[1] = request.getTime();
            row[2] = ((DonorWorkRequest) request);
            row[3] = request.getBloodGroup() == null ? "Not determined" : request.getBloodGroup();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnSendToInventory = new javax.swing.JButton();
        getVitalsButton = new javax.swing.JButton();
        btnSendToNutritionist = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Time", "Status", "Blood group"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 918, 157));

        btnSendToInventory.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        btnSendToInventory.setText(" Send sample to lab");
        btnSendToInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToInventoryActionPerformed(evt);
            }
        });
        add(btnSendToInventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(748, 370, 200, -1));

        getVitalsButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        getVitalsButton.setText("Get Vital Signs");
        getVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getVitalsButtonActionPerformed(evt);
            }
        });
        add(getVitalsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 168, -1));

        btnSendToNutritionist.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        btnSendToNutritionist.setText("Assign Nutritionist");
        btnSendToNutritionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToNutritionistActionPerformed(evt);
            }
        });
        add(btnSendToNutritionist, new org.netbeans.lib.awtextra.AbsoluteConstraints(748, 450, 200, -1));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nurse Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void getVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getVitalsButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DonorWorkRequest request = (DonorWorkRequest) workRequestJTable.getValueAt(selectedRow, 2);
        if(request.getStatus().equals("assigned"))
        {
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("VitalSignsAddJPanel", new VitalSignsAddJPanel(userProcessContainer, userAccount, request, enterprise, organization));
        layout.next(userProcessContainer);
        }
        else
           JOptionPane.showMessageDialog(this, "VitalSigns are taken already", "Warning", JOptionPane.WARNING_MESSAGE);

    }//GEN-LAST:event_getVitalsButtonActionPerformed

    private void btnSendToInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToInventoryActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            DonorWorkRequest request = (DonorWorkRequest) workRequestJTable.getValueAt(selectedRow, 2);

            if (request.getStatus().equalsIgnoreCase("VitalSigns Taken")) {
                request.setReceiver(userAccount);
                request.setStatus("Sent to Lab");
                populateRequestTable();
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof LabOrganization) {
                        org = organization;
                        break;

                    }
                }
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
                 JOptionPane.showMessageDialog(this, "The selected donor request is send successfully to lab", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "The selected donor request is already send", "Warning", JOptionPane.WARNING_MESSAGE);
            }

        }

    }//GEN-LAST:event_btnSendToInventoryActionPerformed

    private void btnSendToNutritionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToNutritionistActionPerformed
        // TODO add your handling code here:
        request1 = new NutritionistWorkRequest();
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            
            DonorWorkRequest request = (DonorWorkRequest) workRequestJTable.getValueAt(selectedRow, 2);
            
            if (request.getStatus().equalsIgnoreCase("Assign Nutrisionist")) {
                request.setReceiver(userAccount);
                request1.setSender(request.getReceiver());
                request1.setUser(request.getSender());
                request1.setMessage("need medical assistance");
                request.setStatus("Sent to Nutritionist");
                populateRequestTable();
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof NutritionistOrganization) {
                        org = organization;
                        break;

                    }
                }
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request1);
                    userAccount.getWorkQueue().getWorkRequestList().add(request1);
                }
                JOptionPane.showMessageDialog(this, "The selected donor request is send successfully to Nutritionist", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "The selected donor request is already send", "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } 
    }//GEN-LAST:event_btnSendToNutritionistActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendToInventory;
    private javax.swing.JButton btnSendToNutritionist;
    private javax.swing.JButton getVitalsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
